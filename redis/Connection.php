<?php

namespace yii\swoole\redis;

use Yii;
use yii\swoole\base\Defer;
use yii\swoole\coroutine\ICoroutine;
use yii\swoole\helpers\CallHelper;
use yii\swoole\pool\RedisPool;

class Connection extends \yii\redis\Connection implements ICoroutine
{
    use Defer;
    //序列化
    public $serialize = true;
    //超时
    public $timeout = 0.5;
    //连接
    public $client;
    //key
    private $key;

    public $maxPoolSize = 15;
    public $busy_pool = 10;

    public function getIsActive()
    {
        return true;
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->key = sprintf('redis:%d:%s:%d', $this->database, $this->hostname, $this->port);
    }

    /**
     * 返回Redis实例。
     * @return null|Redis
     */
    public function Open()
    {
        if (!Yii::$container->hasSingleton('redisclient')) {
            Yii::$container->setSingleton('redisclient', [
                'class' => RedisPool::class,
            ]);
        }
        if (($this->client = Yii::$container->get('redisclient')->fetch($this->key)) === null) {
            $this->client = Yii::$container->get('redisclient')->create($this->key,
                [
                    'hostname' => $this->hostname,
                    'port' => $this->port,
                    'password' => $this->password,
                    'database' => $this->database,
                    'timeout' => $this->timeout,
                    'serialize' => $this->serialize,
                    'pool_size' => $this->maxPoolSize,
                    'busy_size' => $this->busy_pool
                ])->fetch($this->key);
        }
    }

    public function __call($name, $params)
    {
        $redisCommand = strtoupper($name);
        if (in_array($redisCommand, $this->redisCommands)) {
            return $this->executeCommand($redisCommand, $params);
        } else {
            return parent::__call($name, $params);
        }
    }

    public function executeCommand($name, $params = [])
    {
        try {
            $this->Open();
            if ($this->IsDefer) {
                $this->client->setDefer();
                $this->client->{$name}(...$params);
                return clone $this;
            }
            $result = $this->client->{$name}(...$params);
            $this->release();
            return $result;
        } catch (\Exception $e) {
            throw $e;
        }
    }

    public function recv(float $timeout = 0)
    {
        $result = $this->recv($timeout ?: $this->timeout);
        $this->release();
        return $result;
    }

    public function release()
    {
        if (Yii::$container->hasSingleton('redisclient') && $this->client) {
            Yii::$container->get('redisclient')->recycle($this->client);
            $this->client = null;
        }
    }
}
